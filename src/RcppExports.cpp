// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/GKF.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// InvMat_Rcpp
NumericMatrix InvMat_Rcpp(NumericMatrix input);
RcppExport SEXP _GKF_InvMat_Rcpp(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(InvMat_Rcpp(input));
    return rcpp_result_gen;
END_RCPP
}
// nearPD_Rcpp
Rcpp::List nearPD_Rcpp(NumericMatrix x, NumericVector w, bool corr, bool keepDiag, bool EnforcePosDef, bool doSym, bool ensureSymmetry, double eig_tol, double conv_tol, double posd_tol, unsigned maxit, bool chol);
RcppExport SEXP _GKF_nearPD_Rcpp(SEXP xSEXP, SEXP wSEXP, SEXP corrSEXP, SEXP keepDiagSEXP, SEXP EnforcePosDefSEXP, SEXP doSymSEXP, SEXP ensureSymmetrySEXP, SEXP eig_tolSEXP, SEXP conv_tolSEXP, SEXP posd_tolSEXP, SEXP maxitSEXP, SEXP cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< bool >::type keepDiag(keepDiagSEXP);
    Rcpp::traits::input_parameter< bool >::type EnforcePosDef(EnforcePosDefSEXP);
    Rcpp::traits::input_parameter< bool >::type doSym(doSymSEXP);
    Rcpp::traits::input_parameter< bool >::type ensureSymmetry(ensureSymmetrySEXP);
    Rcpp::traits::input_parameter< double >::type eig_tol(eig_tolSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< double >::type posd_tol(posd_tolSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type chol(cholSEXP);
    rcpp_result_gen = Rcpp::wrap(nearPD_Rcpp(x, w, corr, keepDiag, EnforcePosDef, doSym, ensureSymmetry, eig_tol, conv_tol, posd_tol, maxit, chol));
    return rcpp_result_gen;
END_RCPP
}
// Robust_chol_Rcpp
NumericMatrix Robust_chol_Rcpp(NumericMatrix B, double eig_tol);
RcppExport SEXP _GKF_Robust_chol_Rcpp(SEXP BSEXP, SEXP eig_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type eig_tol(eig_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(Robust_chol_Rcpp(B, eig_tol));
    return rcpp_result_gen;
END_RCPP
}
// FKF
Rcpp::List FKF(NumericVector a0_, NumericMatrix P0_, NumericMatrix dt_, NumericMatrix ct_, NumericVector Tt_, NumericVector Zt_, NumericVector Ht_, NumericVector Qt_, NumericMatrix yt_, bool ComputeThetaLik, Rcpp::List ThetaVal);
RcppExport SEXP _GKF_FKF(SEXP a0_SEXP, SEXP P0_SEXP, SEXP dt_SEXP, SEXP ct_SEXP, SEXP Tt_SEXP, SEXP Zt_SEXP, SEXP Ht_SEXP, SEXP Qt_SEXP, SEXP yt_SEXP, SEXP ComputeThetaLikSEXP, SEXP ThetaValSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a0_(a0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P0_(P0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dt_(dt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ct_(ct_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tt_(Tt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zt_(Zt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ht_(Ht_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Qt_(Qt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type yt_(yt_SEXP);
    Rcpp::traits::input_parameter< bool >::type ComputeThetaLik(ComputeThetaLikSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type ThetaVal(ThetaValSEXP);
    rcpp_result_gen = Rcpp::wrap(FKF(a0_, P0_, dt_, ct_, Tt_, Zt_, Ht_, Qt_, yt_, ComputeThetaLik, ThetaVal));
    return rcpp_result_gen;
END_RCPP
}
// NRUpdatingStep
NumericMatrix NRUpdatingStep(NumericVector a0_, NumericMatrix P0_, NumericMatrix dt_, NumericMatrix ct_, NumericVector Tt_, NumericVector Zt_, NumericVector Ht_, NumericVector Qt_, NumericMatrix yt_);
RcppExport SEXP _GKF_NRUpdatingStep(SEXP a0_SEXP, SEXP P0_SEXP, SEXP dt_SEXP, SEXP ct_SEXP, SEXP Tt_SEXP, SEXP Zt_SEXP, SEXP Ht_SEXP, SEXP Qt_SEXP, SEXP yt_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a0_(a0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P0_(P0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dt_(dt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ct_(ct_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tt_(Tt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zt_(Zt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ht_(Ht_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Qt_(Qt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type yt_(yt_SEXP);
    rcpp_result_gen = Rcpp::wrap(NRUpdatingStep(a0_, P0_, dt_, ct_, Tt_, Zt_, Ht_, Qt_, yt_));
    return rcpp_result_gen;
END_RCPP
}
// thetaSampling
Rcpp::List thetaSampling(NumericVector a0_, NumericMatrix P0_, NumericMatrix dt_, NumericMatrix ct_, NumericVector Tt_, NumericVector Zt_, NumericVector Ht_, NumericVector Qt_, NumericMatrix yt_, NumericMatrix thetaHat_, unsigned M);
RcppExport SEXP _GKF_thetaSampling(SEXP a0_SEXP, SEXP P0_SEXP, SEXP dt_SEXP, SEXP ct_SEXP, SEXP Tt_SEXP, SEXP Zt_SEXP, SEXP Ht_SEXP, SEXP Qt_SEXP, SEXP yt_SEXP, SEXP thetaHat_SEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a0_(a0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P0_(P0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dt_(dt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ct_(ct_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tt_(Tt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zt_(Zt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ht_(Ht_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Qt_(Qt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type yt_(yt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type thetaHat_(thetaHat_SEXP);
    Rcpp::traits::input_parameter< unsigned >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(thetaSampling(a0_, P0_, dt_, ct_, Tt_, Zt_, Ht_, Qt_, yt_, thetaHat_, M));
    return rcpp_result_gen;
END_RCPP
}
// GaussianSignalSmoothing
Rcpp::List GaussianSignalSmoothing(NumericVector a0_, NumericMatrix P0_, NumericMatrix dt_, NumericMatrix ct_, NumericVector Tt_, NumericVector Zt_, NumericVector Ht_, NumericVector Qt_, NumericMatrix yt_);
RcppExport SEXP _GKF_GaussianSignalSmoothing(SEXP a0_SEXP, SEXP P0_SEXP, SEXP dt_SEXP, SEXP ct_SEXP, SEXP Tt_SEXP, SEXP Zt_SEXP, SEXP Ht_SEXP, SEXP Qt_SEXP, SEXP yt_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a0_(a0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P0_(P0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dt_(dt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ct_(ct_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tt_(Tt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zt_(Zt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ht_(Ht_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Qt_(Qt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type yt_(yt_SEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianSignalSmoothing(a0_, P0_, dt_, ct_, Tt_, Zt_, Ht_, Qt_, yt_));
    return rcpp_result_gen;
END_RCPP
}
// GaussianthetaSampling
Rcpp::List GaussianthetaSampling(NumericVector a0_, NumericMatrix P0_, NumericMatrix dt_, NumericMatrix ct_, NumericVector Tt_, NumericVector Zt_, NumericVector Ht_, NumericVector Qt_, NumericMatrix yt_, unsigned M);
RcppExport SEXP _GKF_GaussianthetaSampling(SEXP a0_SEXP, SEXP P0_SEXP, SEXP dt_SEXP, SEXP ct_SEXP, SEXP Tt_SEXP, SEXP Zt_SEXP, SEXP Ht_SEXP, SEXP Qt_SEXP, SEXP yt_SEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a0_(a0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P0_(P0_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dt_(dt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ct_(ct_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Tt_(Tt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zt_(Zt_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ht_(Ht_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Qt_(Qt_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type yt_(yt_SEXP);
    Rcpp::traits::input_parameter< unsigned >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianthetaSampling(a0_, P0_, dt_, ct_, Tt_, Zt_, Ht_, Qt_, yt_, M));
    return rcpp_result_gen;
END_RCPP
}
// nearPD
Rcpp::List nearPD(arma::mat x_, arma::vec w_, bool corr, bool keepDiag, bool EnforcePosDef, bool doSym, bool ensureSymmetry, double eig_tol, double conv_tol, double posd_tol, unsigned maxit, bool chol);
static SEXP _GKF_nearPD_try(SEXP x_SEXP, SEXP w_SEXP, SEXP corrSEXP, SEXP keepDiagSEXP, SEXP EnforcePosDefSEXP, SEXP doSymSEXP, SEXP ensureSymmetrySEXP, SEXP eig_tolSEXP, SEXP conv_tolSEXP, SEXP posd_tolSEXP, SEXP maxitSEXP, SEXP cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< bool >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< bool >::type keepDiag(keepDiagSEXP);
    Rcpp::traits::input_parameter< bool >::type EnforcePosDef(EnforcePosDefSEXP);
    Rcpp::traits::input_parameter< bool >::type doSym(doSymSEXP);
    Rcpp::traits::input_parameter< bool >::type ensureSymmetry(ensureSymmetrySEXP);
    Rcpp::traits::input_parameter< double >::type eig_tol(eig_tolSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< double >::type posd_tol(posd_tolSEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type chol(cholSEXP);
    rcpp_result_gen = Rcpp::wrap(nearPD(x_, w_, corr, keepDiag, EnforcePosDef, doSym, ensureSymmetry, eig_tol, conv_tol, posd_tol, maxit, chol));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _GKF_nearPD(SEXP x_SEXP, SEXP w_SEXP, SEXP corrSEXP, SEXP keepDiagSEXP, SEXP EnforcePosDefSEXP, SEXP doSymSEXP, SEXP ensureSymmetrySEXP, SEXP eig_tolSEXP, SEXP conv_tolSEXP, SEXP posd_tolSEXP, SEXP maxitSEXP, SEXP cholSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_GKF_nearPD_try(x_SEXP, w_SEXP, corrSEXP, keepDiagSEXP, EnforcePosDefSEXP, doSymSEXP, ensureSymmetrySEXP, eig_tolSEXP, conv_tolSEXP, posd_tolSEXP, maxitSEXP, cholSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _GKF_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*nearPD)(arma::mat,arma::vec,bool,bool,bool,bool,bool,double,double,double,unsigned,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _GKF_RcppExport_registerCCallable() { 
    R_RegisterCCallable("GKF", "_GKF_nearPD", (DL_FUNC)_GKF_nearPD_try);
    R_RegisterCCallable("GKF", "_GKF_RcppExport_validate", (DL_FUNC)_GKF_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_GKF_InvMat_Rcpp", (DL_FUNC) &_GKF_InvMat_Rcpp, 1},
    {"_GKF_nearPD_Rcpp", (DL_FUNC) &_GKF_nearPD_Rcpp, 12},
    {"_GKF_Robust_chol_Rcpp", (DL_FUNC) &_GKF_Robust_chol_Rcpp, 2},
    {"_GKF_FKF", (DL_FUNC) &_GKF_FKF, 11},
    {"_GKF_NRUpdatingStep", (DL_FUNC) &_GKF_NRUpdatingStep, 9},
    {"_GKF_thetaSampling", (DL_FUNC) &_GKF_thetaSampling, 11},
    {"_GKF_GaussianSignalSmoothing", (DL_FUNC) &_GKF_GaussianSignalSmoothing, 9},
    {"_GKF_GaussianthetaSampling", (DL_FUNC) &_GKF_GaussianthetaSampling, 10},
    {"_GKF_nearPD", (DL_FUNC) &_GKF_nearPD, 12},
    {"_GKF_RcppExport_registerCCallable", (DL_FUNC) &_GKF_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_GKF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
